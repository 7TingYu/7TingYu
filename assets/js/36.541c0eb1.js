(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{628:function(t,s,a){"use strict";a.r(s);var n=a(23),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序"}},[t._v("#")]),t._v(" 顺序")]),t._v(" "),a("h2",{attrs:{id:"leetcode-链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-链表"}},[t._v("#")]),t._v(" LeetCode - 链表")]),t._v(" "),a("ul",[a("li",[t._v("237.删除链表元素\n"),a("ul",[a("li",[t._v("赋值,n->next = n->next->next")])])]),t._v(" "),a("li",[t._v("203.移除链表元素\n"),a("ul",[a("li",[t._v("定义头结点")])])]),t._v(" "),a("li",[t._v("19.删除链表的倒数第n个结点\n"),a("ul",[a("li",[t._v("定义头结点, 双指针递进判断末节点")])])]),t._v(" "),a("li",[t._v("24.两两交换链表中的节点\n"),a("ul",[a("li",[t._v("定义头结点, 双指针交换")])])]),t._v(" "),a("li",[t._v("83.删除排序链表中的重复元素\n"),a("ul",[a("li",[t._v("去重问题, 不需要定义头")])])]),t._v(" "),a("li",[t._v("82.删除排序链表中的重复元素 2 !\n"),a("ul",[a("li",[t._v("会干掉自己, 需定义")])])]),t._v(" "),a("li",[t._v("141.环形链表 !!!!\n"),a("ul",[a("li",[t._v("快慢指针")])])]),t._v(" "),a("li",[t._v("142.环形链表 2\n"),a("ul",[a("li",[t._v("快慢指针, 确定是环后, 从头依次跑,遇到的时候就为环头")])])]),t._v(" "),a("li",[t._v("160.相交链表\n"),a("ul",[a("li",[t._v("判断两根链表是否相交, 让两条链表相连使其等长后, 同步跑判断")])])])]),t._v(" "),a("h2",{attrs:{id:"树与二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树与二叉树"}},[t._v("#")]),t._v(" 树与二叉树")]),t._v(" "),a("p",[t._v("树的基本术语:")]),t._v(" "),a("ol",[a("li",[t._v("父结点、子结点、兄弟结点,祖先、子孙")]),t._v(" "),a("li",[t._v("结点的度, 树的度")]),t._v(" "),a("li",[t._v("叶子结点(终端结点)与分支结点(非终端结点")]),t._v(" "),a("li",[t._v("结点的深度,高度和层次")]),t._v(" "),a("li",[t._v("路径与路径长度")])]),t._v(" "),a("p",[t._v("二叉树的基本术语:")]),t._v(" "),a("ol",[a("li",[t._v("左孩子(左子树)，右孩子(右子树)")]),t._v(" "),a("li",[t._v("每层的结点个数 (2 ^ (k -1))")]),t._v(" "),a("li",[t._v("满二叉树，完全二叉树 (从左往右删)")]),t._v(" "),a("li",[t._v("使用一维数组存储二叉树")]),t._v(" "),a("li",[t._v("广义表")])]),t._v(" "),a("ul",[a("li",[t._v("先序 - 根，左，右 - 输出，左，右")]),t._v(" "),a("li",[t._v("中序 - 左，根，右 - 左，输出，右")]),t._v(" "),a("li",[t._v("后序 - 左，右，根 - 左，右，输出")]),t._v(" "),a("li",[t._v("层序")]),t._v(" "),a("li",[t._v("根据遍历还原树")])]),t._v(" "),a("p",[t._v("随机数")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<time.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("srand")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rand")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);