(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{709:function(v,_,t){"use strict";t.r(_);var e=t(23),a=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"正则表达式到底是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式到底是什么"}},[v._v("#")]),v._v(" 正则表达式到底是什么")]),v._v(" "),t("p",[v._v("正则表达式(Regular Expression)其实就是一门工具，"),t("strong",[v._v("目的")]),v._v("是为了字符串模式匹配，从而实现搜索和替换功能。它起源于上个20世纪50年代科学家在数学领域做的一些研究工作，后来才被引入到计算机领域中。从它的命名我们可以知道，它是一种"),t("strong",[v._v("用来描述规则的表达式")]),v._v("。而它的底层原理也十分简单，就是使用状态机的思想进行模式匹配。大家可以利用"),t("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fregexper.com%2F",title:"https://regexper.com/",target:"_blank",rel:"noopener noreferrer"}},[v._v("regexper.com"),t("OutboundLink")],1),v._v("这个工具很好地可视化自己写的正则表达式:")]),v._v(" "),t("p",[v._v("如"),t("code",[v._v("/\\d\\w+/")]),v._v("这个正则生成的状态机图:")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83572546ce9e43e193c4f48f036205c7~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),v._v(" "),t("p",[v._v("对于具体的算法实现，大家如果感兴趣可以阅读《算法导论》。")]),v._v(" "),t("h1",{attrs:{id:"从字符出发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从字符出发"}},[v._v("#")]),v._v(" 从字符出发")]),v._v(" "),t("p",[v._v("我们学习一个系统化的知识，一定要从其基础构成来了解。正则表达式的基本"),t("strong",[v._v("组成元素")]),v._v("可以分为："),t("strong",[v._v("字符和元字符")]),v._v("。字符很好理解，就是基础的计算机字符编码，通常正则表达式里面使用的就是数字、英文字母。而元字符，也被称为特殊字符，是一些用来表示特殊语义的字符。如^表示非,|表示或等。利用这些元字符，才能构造出强大的表达式模式(pattern)。接下来，我们就来从这些基本单位出发，来学习一下如何构建正则表达式。")]),v._v(" "),t("h2",{attrs:{id:"单个字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单个字符"}},[v._v("#")]),v._v(" 单个字符")]),v._v(" "),t("p",[v._v("最简单的正则表达式可以由简单的数字和字母组成，没有特殊的语义，纯粹就是一一对应的关系。如想在'apple'这个单词里找到‘a'这个字符，就直接用"),t("code",[v._v("/a/")]),v._v("这个正则就可以了。")]),v._v(" "),t("p",[v._v("但是如果想要匹配特殊字符的话，就得请出我们第一个元字符**``**， 它是转义字符字符，顾名思义，就是让其后续的字符失去其本来的含义。举个例子：")]),v._v(" "),t("p",[v._v("我想匹配"),t("code",[v._v("*")]),v._v("这个符号，由于"),t("code",[v._v("*")]),v._v("这个符号本身是个特殊字符，所以我要利用转义元字符``来让它失去其本来的含义：")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("/*/\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br")])]),t("p",[v._v("如果本来这个字符不是特殊字符，使用转义符号就会让它拥有特殊的含义。我们常常需要匹配一些特殊字符，比如空格，制表符，回车，换行等, 而这些就需要我们使用转义字符来匹配。为了便于记忆，我整理了下面这个表格，并附上记忆方式：")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("特殊字符")]),v._v(" "),t("th",[v._v("正则表达式")]),v._v(" "),t("th",[v._v("记忆方式")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("换行符")]),v._v(" "),t("td",[v._v("\\n")]),v._v(" "),t("td",[t("strong",[v._v("n")]),v._v("ew line")])]),v._v(" "),t("tr",[t("td",[v._v("换页符")]),v._v(" "),t("td",[v._v("\\f")]),v._v(" "),t("td",[t("strong",[v._v("f")]),v._v("orm feed")])]),v._v(" "),t("tr",[t("td",[v._v("回车符")]),v._v(" "),t("td",[v._v("\\r")]),v._v(" "),t("td",[t("strong",[v._v("r")]),v._v("eturn")])]),v._v(" "),t("tr",[t("td",[v._v("空白符")]),v._v(" "),t("td",[v._v("\\s")]),v._v(" "),t("td",[t("strong",[v._v("s")]),v._v("pace")])]),v._v(" "),t("tr",[t("td",[v._v("制表符")]),v._v(" "),t("td",[v._v("\\t")]),v._v(" "),t("td",[t("strong",[v._v("t")]),v._v("ab")])]),v._v(" "),t("tr",[t("td",[v._v("垂直制表符")]),v._v(" "),t("td",[v._v("\\v")]),v._v(" "),t("td",[t("strong",[v._v("v")]),v._v("ertical tab")])]),v._v(" "),t("tr",[t("td",[v._v("回退符")]),v._v(" "),t("td",[v._v("[\\b]")]),v._v(" "),t("td",[t("strong",[v._v("b")]),v._v("ackspace,之所以使用[]符号是避免和\\b重复")])])])]),v._v(" "),t("h2",{attrs:{id:"多个字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多个字符"}},[v._v("#")]),v._v(" 多个字符")]),v._v(" "),t("p",[v._v("单个字符的映射关系是一对一的，即正则表达式的被用来筛选匹配的字符只有一个。而这显然是不够的，只要引入集合区间和通配符的方式就可以实现一对多的匹配了。")]),v._v(" "),t("p",[v._v("在正则表达式里，集合的定义方式是使用中括号"),t("code",[v._v("[")]),v._v("和"),t("code",[v._v("]")]),v._v("。如"),t("code",[v._v("/[123]/")]),v._v("这个正则就能同时匹配1,2,3三个字符。那如果我想匹配所有的数字怎么办呢？从0写到9显然太过低效，所以元字符"),t("code",[v._v("-")]),v._v("就可以用来表示区间范围，利用"),t("code",[v._v("/[0-9]/")]),v._v("就能匹配所有的数字, "),t("code",[v._v("/[a-z]/")]),v._v("则可以匹配所有的英文小写字母。")]),v._v(" "),t("p",[v._v("即便有了集合和区间的定义方式，如果要同时匹配多个字符也还是要一一列举，这是低效的。所以在正则表达式里衍生了一批用来同时匹配多个字符的简便正则表达式:")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("匹配区间")]),v._v(" "),t("th",[v._v("正则表达式")]),v._v(" "),t("th",[v._v("记忆方式")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("除了换行符之外的任何字符")]),v._v(" "),t("td",[v._v(".")]),v._v(" "),t("td",[v._v("句号,除了句子结束符")])]),v._v(" "),t("tr",[t("td",[v._v("单个数字, [0-9]")]),v._v(" "),t("td",[v._v("\\d")]),v._v(" "),t("td",[t("strong",[v._v("d")]),v._v("igit")])]),v._v(" "),t("tr",[t("td",[v._v("除了[0-9]")]),v._v(" "),t("td",[v._v("\\D")]),v._v(" "),t("td",[t("strong",[v._v("not")]),v._v(" "),t("strong",[v._v("d")]),v._v("igit")])]),v._v(" "),t("tr",[t("td",[v._v("包括下划线在内的单个字符，[A-Za-z0-9_]")]),v._v(" "),t("td",[v._v("\\w")]),v._v(" "),t("td",[t("strong",[v._v("w")]),v._v("ord")])]),v._v(" "),t("tr",[t("td",[v._v("非单字字符")]),v._v(" "),t("td",[v._v("\\W")]),v._v(" "),t("td",[t("strong",[v._v("not")]),v._v(" "),t("strong",[v._v("w")]),v._v("ord")])]),v._v(" "),t("tr",[t("td",[v._v("匹配空白字符,包括空格、制表符、换页符和换行符")]),v._v(" "),t("td",[v._v("\\s")]),v._v(" "),t("td",[t("strong",[v._v("s")]),v._v("pace")])]),v._v(" "),t("tr",[t("td",[v._v("匹配非空白字符")]),v._v(" "),t("td",[v._v("\\S")]),v._v(" "),t("td",[t("strong",[v._v("not")]),v._v(" "),t("strong",[v._v("s")]),v._v("pace")])])])]),v._v(" "),t("h1",{attrs:{id:"循环与重复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环与重复"}},[v._v("#")]),v._v(" 循环与重复")]),v._v(" "),t("p",[v._v("一对一和一对多的字符匹配都讲完了。接下来，就该介绍如何同时匹配多个字符。要实现多个字符的匹配我们只要多次循环，重复使用我们的之前的正则规则就可以了。那么根据循环次数的多与少，我们可以分为0次，1次，多次，特定次。")]),v._v(" "),t("h2",{attrs:{id:"_0-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0-1"}},[v._v("#")]),v._v(" 0 | 1")]),v._v(" "),t("p",[v._v("元字符"),t("code",[v._v("?")]),v._v("代表了匹配一个字符或0个字符。设想一下，如果你要匹配"),t("code",[v._v("color")]),v._v("和"),t("code",[v._v("colour")]),v._v("这两个单词，就需要同时保证"),t("code",[v._v("u")]),v._v("这个字符是否出现都能被匹配到。所以你的正则表达式应该是这样的："),t("code",[v._v("/colou?r/")]),v._v("。")]),v._v(" "),t("h2",{attrs:{id:"_0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_0"}},[v._v("#")]),v._v(" >= 0")]),v._v(" "),t("p",[v._v("元字符"),t("code",[v._v("*")]),v._v("用来表示匹配0个字符或无数个字符。通常用来过滤某些可有可无的字符串。")]),v._v(" "),t("h2",{attrs:{id:"_1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1"}},[v._v("#")]),v._v(" >= 1")]),v._v(" "),t("p",[v._v("元字符"),t("code",[v._v("+")]),v._v("适用于要匹配同个字符出现1次或多次的情况。")]),v._v(" "),t("h2",{attrs:{id:"特定次数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特定次数"}},[v._v("#")]),v._v(" 特定次数")]),v._v(" "),t("p",[v._v("在某些情况下，我们需要匹配特定的重复次数，元字符"),t("code",[v._v("{")]),v._v("和"),t("code",[v._v("}")]),v._v("用来给重复匹配设置精确的区间范围。如'a'我想匹配3次,那么我就使用"),t("code",[v._v("/a{3}/")]),v._v("这个正则，或者说'a'我想匹配至少两次就是用"),t("code",[v._v("/a{2,}/")]),v._v("这个正则。")]),v._v(" "),t("p",[v._v("以下是完整的语法：")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("- {x}: x次\n\n- {min, max}： 介于min次到max次之间\n\n- {min, }: 至少min次\n\n- {0, max}： 至多max次\n复制代码\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br"),t("span",{staticClass:"line-number"},[v._v("5")]),t("br"),t("span",{staticClass:"line-number"},[v._v("6")]),t("br"),t("span",{staticClass:"line-number"},[v._v("7")]),t("br"),t("span",{staticClass:"line-number"},[v._v("8")]),t("br")])]),t("p",[v._v("由于这些元字符比较抽象，且容易混淆，所以我用了联想记忆的方式编了口诀能保证在用到的时候就能回忆起来。")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("匹配规则")]),v._v(" "),t("th",[v._v("元字符")]),v._v(" "),t("th",[v._v("联想方式")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("0次或1次")]),v._v(" "),t("td",[v._v("?")]),v._v(" "),t("td",[v._v("且"),t("strong",[v._v("问")]),v._v(",此事"),t("strong",[v._v("有")]),v._v("还"),t("strong",[v._v("无")])])]),v._v(" "),t("tr",[t("td",[v._v("0次或无数次")]),v._v(" "),t("td",[v._v("*")]),v._v(" "),t("td",[v._v("宇宙洪荒,"),t("strong",[v._v("辰宿")]),v._v("列张：宇宙伊始，从无到有，最后星宿布满星空")])]),v._v(" "),t("tr",[t("td",[v._v("1次或无数次")]),v._v(" "),t("td",[v._v("+")]),v._v(" "),t("td",[t("strong",[v._v("一加")]),v._v(", +1")])]),v._v(" "),t("tr",[t("td",[v._v("特定次数")]),v._v(" "),t("td",[v._v("{x}, {min, max}")]),v._v(" "),t("td",[v._v("可以想象成一个数轴，从一个点，到一个射线再到线段。min和max分别表示了左闭右闭区间的左界和右界")])])])]),v._v(" "),t("h1",{attrs:{id:"位置边界"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位置边界"}},[v._v("#")]),v._v(" 位置边界")]),v._v(" "),t("p",[v._v("上面我们把字符的匹配都介绍完了，接着我们还需要位置边界的匹配。在长文本字符串查找过程中，我们常常需要限制查询的位置。比如我只想在单词的开头结尾查找。")]),v._v(" "),t("h2",{attrs:{id:"单词边界"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单词边界"}},[v._v("#")]),v._v(" 单词边界")]),v._v(" "),t("p",[v._v("单词是构成句子和文章的基本单位，一个常见的使用场景是把文章或句子中的特定单词找出来。如：")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("The cat scattered his food all over the room.\n复制代码\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br")])]),t("p",[v._v("我想找到"),t("code",[v._v("cat")]),v._v("这个单词，但是如果只是使用"),t("code",[v._v("/cat/")]),v._v("这个正则，就会同时匹配到"),t("code",[v._v("cat")]),v._v("和"),t("code",[v._v("scattered")]),v._v("这两处文本。这时候我们就需要使用边界正则表达式"),t("code",[v._v("\\b")]),v._v("，其中b是boundary的首字母。在正则引擎里它其实匹配的是能构成单词的字符(\\w)和不能构成单词的字符(\\W)中间的那个位置。")]),v._v(" "),t("p",[v._v("上面的例子改写成"),t("code",[v._v("/\\bcat\\b/")]),v._v("这样就能匹配到"),t("code",[v._v("cat")]),v._v("这个单词了。")]),v._v(" "),t("h2",{attrs:{id:"字符串边界"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串边界"}},[v._v("#")]),v._v(" 字符串边界")]),v._v(" "),t("p",[v._v("匹配完单词，我们再来看一下一整个字符串的边界怎么匹配。元字符"),t("code",[v._v("^")]),v._v("用来匹配字符串的开头。而元字符"),t("code",[v._v("$")]),v._v("用来匹配字符串的末尾。注意的是在长文本里，如果要排除换行符的干扰，我们要使用多行模式。试着匹配"),t("code",[v._v("I am scq000")]),v._v("这个句子：")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("I am scq000.\nI am scq000.\nI am scq000.\n复制代码\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br")])]),t("p",[v._v("我们可以使用"),t("code",[v._v("/^I am scq000.$/m")]),v._v("这样的正则表达式，其实m是multiple line的首字母。正则里面的模式除了m外比较常用的还有i和g。前者的意思是忽略大小写，后者的意思是找到所有符合的匹配。")]),v._v(" "),t("p",[v._v("最后，总结一下：")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("边界和标志")]),v._v(" "),t("th",[v._v("正则表达式")]),v._v(" "),t("th",[v._v("记忆方式")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("单词边界")]),v._v(" "),t("td",[v._v("\\b")]),v._v(" "),t("td",[t("strong",[v._v("b")]),v._v("oundary")])]),v._v(" "),t("tr",[t("td",[v._v("非单词边界")]),v._v(" "),t("td",[v._v("\\B")]),v._v(" "),t("td",[t("strong",[v._v("not")]),v._v(" "),t("strong",[v._v("b")]),v._v("oundary")])]),v._v(" "),t("tr",[t("td",[v._v("字符串开头")]),v._v(" "),t("td",[v._v("^")]),v._v(" "),t("td",[v._v("小"),t("strong",[v._v("头尖尖")]),v._v("那么大个")])]),v._v(" "),t("tr",[t("td",[v._v("字符串结尾")]),v._v(" "),t("td",[v._v("$")]),v._v(" "),t("td",[t("strong",[v._v("终结")]),v._v("者，美国科幻电影，美元符$")])]),v._v(" "),t("tr",[t("td",[v._v("多行模式")]),v._v(" "),t("td",[v._v("m标志")]),v._v(" "),t("td",[t("strong",[v._v("m")]),v._v("ultiple of lines")])]),v._v(" "),t("tr",[t("td",[v._v("忽略大小写")]),v._v(" "),t("td",[v._v("i标志")]),v._v(" "),t("td",[t("strong",[v._v("i")]),v._v("gnore case, case-"),t("strong",[v._v("i")]),v._v("nsensitive")])]),v._v(" "),t("tr",[t("td",[v._v("全局模式")]),v._v(" "),t("td",[v._v("g标志")]),v._v(" "),t("td",[t("strong",[v._v("g")]),v._v("lobal")])])])]),v._v(" "),t("h1",{attrs:{id:"子表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#子表达式"}},[v._v("#")]),v._v(" 子表达式")]),v._v(" "),t("p",[v._v("字符匹配我们介绍的差不多了，更加高级的用法就得用到子表达式了。通过嵌套递归和自身引用可以让正则发挥更强大的功能。")]),v._v(" "),t("p",[v._v("从简单到复杂的正则表达式演变通常要采用"),t("strong",[v._v("分组、回溯引用和逻辑处理")]),v._v("的思想。利用这三种规则，可以推演出无限复杂的正则表达式。")]),v._v(" "),t("h2",{attrs:{id:"分组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[v._v("#")]),v._v(" 分组")]),v._v(" "),t("p",[v._v("其中分组体现在：所有以"),t("code",[v._v("(")]),v._v("和"),t("code",[v._v(")")]),v._v("元字符所包含的正则表达式被分为一组，每一个分组都是一个"),t("strong",[v._v("子表达式")]),v._v("，它也是构成高级正则表达式的基础。如果只是使用简单的"),t("code",[v._v("(regex)")]),v._v("匹配语法本质上和不分组是一样的，如果要发挥它强大的作用，往往要结合回溯引用的方式。")]),v._v(" "),t("h2",{attrs:{id:"回溯引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回溯引用"}},[v._v("#")]),v._v(" 回溯引用")]),v._v(" "),t("p",[v._v("所谓回溯引用（backreference）指的是模式的后面部分引用前面已经匹配到的子字符串。你可以把它想象成是变量，回溯引用的语法像"),t("code",[v._v("\\1")]),v._v(","),t("code",[v._v("\\2")]),v._v(",....,其中"),t("code",[v._v("\\1")]),v._v("表示引用的第一个子表达式，"),t("code",[v._v("\\2")]),v._v("表示引用的第二个子表达式，以此类推。而"),t("code",[v._v("\\0")]),v._v("则表示整个表达式。")]),v._v(" "),t("p",[v._v("假设现在要在下面这个文本里匹配两个连续相同的单词，你要怎么做呢？")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("Hello what what is the first thing, and I am am scq000.\n复制代码\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br")])]),t("p",[v._v("利用回溯引用，我们可以很容易地写出"),t("code",[v._v("\\b(\\w+)\\s\\1")]),v._v("这样的正则。")]),v._v(" "),t("p",[v._v("回溯引用在替换字符串中十分常用，语法上有些许区别，用"),t("code",[v._v("$1")]),v._v(","),t("code",[v._v("$2")]),v._v("...来引用要被替换的字符串。下面以js代码作演示：")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("var str = 'abc abc 123';\nstr.replace(/(ab)c/g,'$1g');\n// 得到结果 'abg abg 123'\n复制代码\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br")])]),t("p",[v._v("如果我们不想子表达式被引用，可以使用"),t("strong",[v._v("非捕获")]),v._v("正则"),t("code",[v._v("(?:regex)")]),v._v("这样就可以避免浪费内存。")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("var str = 'scq000'.\nstr.replace(/(scq00)(?:0)/, '$1,$2')\n// 返回scq00,$2\n// 由于使用了非捕获正则，所以第二个引用没有值，这里直接替换为$2\n复制代码\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br"),t("span",{staticClass:"line-number"},[v._v("5")]),t("br")])]),t("p",[v._v("有时，我们需要限制回溯引用的适用范围。那么通过前向查找和后向查找就可以达到这个目的。")]),v._v(" "),t("h3",{attrs:{id:"前向查找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前向查找"}},[v._v("#")]),v._v(" 前向查找")]),v._v(" "),t("p",[v._v("前向查找(lookahead)是用来限制后缀的。凡是以"),t("code",[v._v("(?=regex)")]),v._v("包含的子表达式在匹配过程中都会用来限制前面的表达式的匹配。例如"),t("code",[v._v("happy happily")]),v._v("这两个单词，我想获得以"),t("code",[v._v("happ")]),v._v("开头的副词，那么就可以使用"),t("code",[v._v("happ(?=ily)")]),v._v("来匹配。如果我想过滤所有以"),t("code",[v._v("happ")]),v._v("开头的副词，那么也可以采用"),t("strong",[v._v("负前向查找")]),v._v("的正则"),t("code",[v._v("happ(?!ily)")]),v._v("，就会匹配到"),t("code",[v._v("happy")]),v._v("单词的"),t("code",[v._v("happ")]),v._v("前缀。")]),v._v(" "),t("h3",{attrs:{id:"后向查找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后向查找"}},[v._v("#")]),v._v(" 后向查找")]),v._v(" "),t("p",[v._v("介绍完前向查找，接着我们再来介绍一下它的反向操作：后向查找(lookbehind)。后向查找(lookbehind)是通过指定一个子表达式，然后从符合这个子表达式的位置出发开始查找符合规则的字串。举个简单的例子： "),t("code",[v._v("apple")]),v._v("和"),t("code",[v._v("people")]),v._v("都包含"),t("code",[v._v("ple")]),v._v("这个后缀，那么如果我只想找到"),t("code",[v._v("apple")]),v._v("的"),t("code",[v._v("ple")]),v._v("，该怎么做呢？我们可以通过限制"),t("code",[v._v("app")]),v._v("这个前缀，就能唯一确定"),t("code",[v._v("ple")]),v._v("这个单词了。")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("/(?<=app)ple/\n复制代码\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br")])]),t("p",[v._v("其中"),t("code",[v._v("(?<=regex)")]),v._v("的语法就是我们这里要介绍的后向查找。"),t("code",[v._v("regex")]),v._v("指代的子表达式会作为限制项进行匹配，匹配到这个子表达式后，就会继续向"),t("strong",[v._v("后")]),v._v("查找。另外一种限制匹配是利用"),t("code",[v._v("(?<!regex)")]),v._v(" 语法，这里称为"),t("strong",[v._v("负后向查找")]),v._v("。与正前向查找不同的是，被指定的子表达式不能被匹配到。于是，在上面的例子中，如果想要查找"),t("code",[v._v("apple")]),v._v("的"),t("code",[v._v("ple")]),v._v("也可以这么写成"),t("code",[v._v("/(?<!peo)ple")]),v._v("。")]),v._v(" "),t("p",[v._v("需要注意的，不是每种正则实现都支持后向查找。在javascript中是不支持的，所以如果有用到后向查找的情况，有一个思路是将字符串进行翻转，然后再使用前向查找，作完处理后再翻转回来。看一个简单的例子：")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("// 比如我想替换apple的ple为ply\nvar str = 'apple people';\nstr.split('').reverse().join('').replace(/elp(?=pa)/, 'ylp').split('').reverse().join('');\n复制代码\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br")])]),t("p",[v._v("最后回顾一下这部分内容：")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("回溯查找")]),v._v(" "),t("th",[v._v("正则")]),v._v(" "),t("th",[v._v("记忆方式")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("引用")]),v._v(" "),t("td",[v._v("\\0,\\1,\\2 和 $0, $1, $2")]),v._v(" "),t("td",[v._v("转义+数字")])]),v._v(" "),t("tr",[t("td",[v._v("非捕获组")]),v._v(" "),t("td",[v._v("(?😃")]),v._v(" "),t("td",[v._v("引用表达式(()), 本身不被消费(?),引用(😃")])]),v._v(" "),t("tr",[t("td",[v._v("前向查找")]),v._v(" "),t("td",[v._v("(?=)")]),v._v(" "),t("td",[v._v("引用子表达式(())，本身不被消费(?), 正向的查找(=)")])]),v._v(" "),t("tr",[t("td",[v._v("前向负查找")]),v._v(" "),t("td",[v._v("(?!)")]),v._v(" "),t("td",[v._v("引用子表达式(())，本身不被消费(?), 负向的查找(!)")])]),v._v(" "),t("tr",[t("td",[v._v("后向查找")]),v._v(" "),t("td",[v._v("(?<=)")]),v._v(" "),t("td",[v._v("引用子表达式(())，本身不被消费(?), 后向的(<，开口往后)，正的查找(=)")])]),v._v(" "),t("tr",[t("td",[v._v("后向负查找")]),v._v(" "),t("td",[v._v("(?<!)")]),v._v(" "),t("td",[v._v("引用子表达式(())，本身不被消费(?), 后向的(<，开口往后)，负的查找(!)")])])])]),v._v(" "),t("h2",{attrs:{id:"逻辑处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑处理"}},[v._v("#")]),v._v(" 逻辑处理")]),v._v(" "),t("p",[v._v("计算机科学就是一门包含逻辑的科学。让我们回忆一下编程语言当中用到的三种逻辑关系，与或非。")]),v._v(" "),t("p",[v._v("在正则里面，默认的正则规则都是"),t("strong",[v._v("与")]),v._v("的关系所以这里不讨论。")]),v._v(" "),t("p",[v._v("而"),t("strong",[v._v("非")]),v._v("关系，分为两种情况：一种是字符匹配，另一种是子表达式匹配。在字符匹配的时候，需要使用"),t("code",[v._v("^")]),v._v("这个元字符。在这里要着重记忆一下："),t("strong",[v._v("只有在"),t("code",[v._v("[")]),v._v("和"),t("code",[v._v("]")]),v._v("内部使用的"),t("code",[v._v("^")]),v._v("才表示非的关系")]),v._v("。子表达式匹配的非关系就要用到前面介绍的前向负查找子表达式"),t("code",[v._v("(?!regex)")]),v._v("或后向负查找子表达式"),t("code",[v._v("(?<!regex)")]),v._v("。")]),v._v(" "),t("p",[v._v("或关系，通常给子表达式进行归类使用。比如，我同时匹配a,b两种情况就可以使用"),t("code",[v._v("(a|b)")]),v._v("这样的子表达式。")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("逻辑关系")]),v._v(" "),t("th",[v._v("正则元字符")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("与")]),v._v(" "),t("td",[v._v("无")])]),v._v(" "),t("tr",[t("td",[v._v("非")]),v._v(" "),t("td",[v._v("[^regex]和!")])]),v._v(" "),t("tr",[t("td",[v._v("或")]),v._v(" "),t("td",[v._v("|")])])])])])}),[],!1,null,null,null);_.default=a.exports}}]);